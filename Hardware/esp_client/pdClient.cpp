#include "pdClient.h"
#include "pdSettings.h"

///--------------------------------------------------------------------------------------
using namespace Network;
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
AClient :: AClient()
{

}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
AClient :: ~AClient()
{

}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// добавление действия к протоколу сетевому
/// 
/// 
///--------------------------------------------------------------------------------------
void AClient :: addAction(AAction *action)
{
	mActions.push_back(action);
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// установка токена
/// 
/// 
///--------------------------------------------------------------------------------------
void AClient :: setToken(const String &token)
{
	mSTP.setToken(token);
}
///--------------------------------------------------------------------------------------




 ///=====================================================================================
///
/// получить текущий токен
/// 
/// 
///--------------------------------------------------------------------------------------
String AClient :: token()const
{
	return mSTP.token();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Инциализация сокетов
/// 
/// 
///--------------------------------------------------------------------------------------
void AClient :: begin()
{
	mUdp.begin(Settings::clientPort);
}
///--------------------------------------------------------------------------------------




 ///=====================================================================================
///
/// обработка действий
/// 
/// 
///--------------------------------------------------------------------------------------
void AClient :: update()
{
	const int packetSize = mUdp.parsePacket();
	if (packetSize <= 0)
	{
		//данные не пришли
		return;
	}

	//создадис входящий пакет
	mPacketReceiv.create(packetSize);
	mUdp.read(mPacketReceiv.data(), mPacketReceiv.size());
	
	if (!mPacketReceiv.isValid())
	{
		//пакет битый в хламину
		return;
	}

	/*
	
	if (packetSize <= sizeof(Protocol::THeader))
	{
		//пакет маленький, пришло какоето гавно
		return;
	}

	const auto *header = (Protocol::THeader*)mBufferReceiv;
	if (header->SRC != Protocol::SRC)
	{
		//проблема с магическим числом. пакет неверный
		return;
	}

	//проверка достоверность данных
	if (!mSTP.securityCheck(header))
	{
		//данные не корректные, отошлем серверу чтобы он перехерачил данные
		return;
	}


	//поиск команды для обработки запроса
	AAction *pAction = nullptr;
	for (auto &action : mActions)
	{
		if (action->typeAction() == header->typeAction)
		{
			pAction == action;
			break;
		}
	}
	if (pAction == nullptr)
	{
		//команда не найденна
		return;
	}

	//
	//указатель данных
	const uint8_t *pData = mBufferReceiv + sizeof(Protocol::THeader);
	const int sizeData = packetSize - sizeof(Protocol::THeader);

	pAction->receiv();

	//отошлем ответ
	mUdp.beginPacket(mUdp.remoteIP(), mUdp.remotePort());
	//mUdp.write(mBufferSend, len);
	mUdp.endPacket();

	*/

}
///--------------------------------------------------------------------------------------

