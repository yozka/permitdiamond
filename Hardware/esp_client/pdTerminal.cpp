#include "Arduino.h"
#include "pdTerminal.h"

using namespace Terminal;
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
ATerminal::ATerminal(Stream *stream)
	: 
		mStream(stream)
{
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
ATerminal::~ATerminal() 
{
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// Добавление комманд
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal ::addCommand(ACommand *cmd)
{
	mCommands.push_back(cmd);
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// обработка потока данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal :: update() 
{
	if (mStream ==  nullptr)
	{
		return;
	}
	

	while (mStream->available())
	{
		char c = mStream->read();
		switch (c)
		{
		case '-':
		case ' ':
		case '.':
		case ',':
		case '0' ... '9' :
		case 'A' ... 'z' :
			{
				mBuffer += c;
				mStream->write(c);
				break;
			}
		case KEY_BS:
		case KEY_DEL:
			{
				if (mBuffer.length() > 0)
				{
					mBuffer = mBuffer.substring(0, mBuffer.length() - 1);
					mStream->write(KEY_DEL);
				}
				break;
			}

		case KEY_CR:
			{
				mStream->println();
				anaylseLine(mBuffer);
				mBuffer = String();
				break;
			}

		default:
			break;
		}
	}
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// покажем помощь
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal :: printHelp() 
{
	commandHelp();
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// установка текущего потока
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal :: setStream(Stream* stream) 
{
	mStream = stream;
}
///--------------------------------------------------------------------------------------





/// PRIVATE




 ///=====================================================================================
///
/// fанализ линии
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal:: anaylseLine(const String &line) 
{
	if (line.length() == 0)
	{
		return;

	}
	String cmd = getFirstWord(line);
	if (cmd.equals(Settings::CMD_HELP)) 
	{
		commandHelp();
		return;
	}
	

	// обработка команд
	for (auto &command : mCommands)
	{
		if (cmd.equals(command->name()))
		{
			command->execute(mStream, line);
			return;
		}
	}

	mStream->print(F("Unknown command : "));
	mStream->println(cmd);
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// найти первое входящее слово
/// 
/// 
///--------------------------------------------------------------------------------------
String ATerminal :: getFirstWord(const String & line) 
{
	int firstSpace = line.indexOf(' ');
	if (firstSpace == -1) 
	{
		firstSpace = line.length();
	}
	return line.substring(0, firstSpace);
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Показать помощь
/// 
/// 
///--------------------------------------------------------------------------------------
void ATerminal::commandHelp() 
{
	mStream->println(F("============================================"));
	mStream->println(F("          Системный терминал"));
	mStream->println(F("============================================"));
	mStream->println(F("Доступные команды : "));
	mStream->print(F(" - "));
	mStream->println(Settings::CMD_HELP);
	

	for (auto &command : mCommands)
	{
		mStream->print(F(" - "));
		mStream->print(command->name());
		mStream->print(F(" "));
		mStream->println(command->description());
	}
	mStream->println(F("============================================"));
}
///--------------------------------------------------------------------------------------










